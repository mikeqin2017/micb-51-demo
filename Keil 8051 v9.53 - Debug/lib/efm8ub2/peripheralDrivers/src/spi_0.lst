C51 COMPILER V9.53.0.0   SPI_0                                                             01/08/2018 09:45:17 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SPI_0
OBJECT MODULE PLACED IN .\lib\efm8ub2\peripheralDrivers\src\spi_0.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\SiliconLabs\S
                    -implicityStudio\v4\developer\sdks\8051\v4.1.1\Device\EFM8UB2\peripheral_driver\src\spi_0.c OMF2 SMALL DEBUG OBJECTEXTEND
                    - ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users
                    -\shuwen.ou\SimplicityStudio\v4_workspace\MICB-51\inc;C:\Users\shuwen.ou\SimplicityStudio\v4_workspace\MICB-51\inc\config
                    -;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v4/devel
                    -oper/sdks/8051/v4.1.1//kits/EFM8UB2_SLSTK2001A/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Dev
                    -ice/EFM8UB2/peripheral_driver/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051bas
                    -e;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8UB2/inc;C:/SiliconLabs/SimplicityStudio/v4/d
                    -eveloper/sdks/8051/v4.1.1//kits/common/drivers/efm8_retargetserial) PRINT(.\lib\efm8ub2\peripheralDrivers\src\spi_0.lst)
                    - COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\lib\efm8ub2\peripheralDrivers\src\spi_0.OBJ)

line level    source

   1          /******************************************************************************
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          
   7          #include "efm8_config.h"
   8          #include "SI_EFM8UB2_Register_Enums.h"
   9          #include "spi_0.h"
  10          
  11          // Runtime API
  12          
  13          // Flag to indicate if driver should control Nss (chip select)
  14          static bool useNss  = false;
  15          
  16          // flag to indicate we are in master mode (else slave)
  17          static bool modeIsMaster = false;
  18          
  19          // flag to indicate that init vars (above) are valid.  If they are
  20          // not valid then a special one-time init will be called to set them
  21          static bool initIsValid = false;
  22          
  23          // ----------------------------------------------------------------------------
  24          // Initialize internal state variables.  This is used if init API is
  25          // not called.
  26          // ----------------------------------------------------------------------------
  27          static void SPI0_internalInit(void)
  28          {
  29   1        // figure out if we are master mode, and using 4-wire or not
  30   1        modeIsMaster = SPI0CFG & SPI0CFG_MSTEN__MASTER_ENABLED;
  31   1        useNss = SPI0CN0 & SPI0CN0_NSSMD__FMASK;
  32   1      
  33   1        // indicate that init has now been done
  34   1        initIsValid = true;
  35   1      }
  36          
  37          // ----------------------------------------------------------------------------
  38          // Write a byte if transmit buffer is not full.
  39          // ----------------------------------------------------------------------------
  40          bool SPI0_writeByte(uint8_t value)
  41          {
  42   1        bool ret = false;
  43   1        // check to see if transmit buffer is not full
  44   1        if (SPI0CN0_TXBMT)
  45   1        {
  46   2          SPI0DAT = value;
  47   2          ret = true;
C51 COMPILER V9.53.0.0   SPI_0                                                             01/08/2018 09:45:17 PAGE 2   

  48   2        }
  49   1        return ret;
  50   1      }
  51          
  52          // ----------------------------------------------------------------------------
  53          // Write a byte, waiting for transmit buffer to be empty
  54          // ----------------------------------------------------------------------------
  55          void SPI0_pollWriteByte(uint8_t value)
  56          {
  57   1        // wait for TX empty
  58   1        while (!SPI0CN0_TXBMT)
  59   1        {}
  60   1      
  61   1        SPI0DAT = value;
  62   1      }
  63          
  64          // ----------------------------------------------------------------------------
  65          // Perform a multi-byte transfer, waiting for each byte to complete.
  66          // ----------------------------------------------------------------------------
  67          uint8_t
  68          SPI0_pollTransfer(SI_VARIABLE_SEGMENT_POINTER(pTxBuffer, uint8_t,
  69                                                        EFM8PDL_SPI0_TX_SEGTYPE),
  70                            SI_VARIABLE_SEGMENT_POINTER(pRxBuffer, uint8_t,
  71                                                        EFM8PDL_SPI0_RX_SEGTYPE),
  72                            SPI0_TransferDirection_t dir,
  73                            uint8_t xferCount)
  74          {
  75   1        uint8_t txCount = xferCount;
  76   1        bool checkNss = false;
  77   1      
  78   1        // This function is not interrupt driven and if SPI interrupts are
  79   1        // enabled, it can cause interference.
  80   1        SPI0_disableInt();
  81   1      
  82   1        // make sure SPI is not already busy
  83   1        while (SPI0CFG & SPI0CFG_SPIBSY__BMASK)
  84   1        {}
  85   1      
  86   1        // Check to see if run-time mode variables have been set up
  87   1        if (!initIsValid)
  88   1        {
  89   2          SPI0_internalInit();
  90   2        }
  91   1      
  92   1        // Flush the RX buffer in case something is in there
  93   1        {
  94   2          uint8_t dummy = SPI0DAT;
  95   2        }
  96   1      
  97   1        // Clear the interrupt flag that is used to indicate transfer complete
  98   1        SPI0CN0_SPIF = 0;
  99   1      
 100   1        // assert NSS (if used)
 101   1        if (modeIsMaster && useNss)
 102   1        {
 103   2          SPI0CN0_NSSMD0 = 0;
 104   2        }
 105   1      
 106   1        // Wait in loop until the requested number of transfers are complete
 107   1        // Note: xferCount tracks the number of bytes received
 108   1        while (xferCount)
 109   1        {
 110   2          // If the transmit buffer is empty and there are still bytes to
C51 COMPILER V9.53.0.0   SPI_0                                                             01/08/2018 09:45:17 PAGE 3   

 111   2          // write, then write a byte out
 112   2          if (SPI0CN0_TXBMT && txCount)
 113   2          {
 114   3            // If user provided a write buffer then use that
 115   3            if (dir & SPI0_TRANSFER_TX)
 116   3            {
 117   4              SPI0DAT = *pTxBuffer;
 118   4              ++pTxBuffer;
 119   4            }
 120   3      
 121   3            // else user did not provide write buffer so just use zeroes
 122   3            else
 123   3            {
 124   4              SPI0DAT = 0;
 125   4            }
 126   3      
 127   3            --txCount;
 128   3          }
 129   2      
 130   2          // If the interrupt flag is set it means a transfer has completed
 131   2          // so read a byte
 132   2          if (SPI0CN0_SPIF)
 133   2          {
 134   3            SPI0CN0_SPIF = 0;
 135   3      
 136   3            // If user provided RX buffer, then read byte into buffer
 137   3            if (dir & SPI0_TRANSFER_RX)
 138   3            {
 139   4              *pRxBuffer = SPI0DAT;
 140   4              ++pRxBuffer;
 141   4            }
 142   3      
 143   3            // else there is no RX buffer so just throw away the incoming byte
 144   3            else
 145   3            {
 146   4              uint8_t dummy = SPI0DAT;
 147   4            }
 148   3      
 149   3            --xferCount;
 150   3          }
 151   2      
 152   2          // If we are in slave mode and 4-wire, then check to make sure
 153   2          // slave is selected.  If not it means the spi master stopped
 154   2          // the transfer.  Bust out of the polling loop so we dont hang
 155   2          // here forever.
 156   2          if (!modeIsMaster && useNss)
 157   2          {
 158   3            // wait for nss to be asserted the first time before we
 159   3            // start checking it
 160   3            if (!checkNss)
 161   3            {
 162   4              if ((SPI0CFG & SPI0CFG_SLVSEL__BMASK))
 163   4              {
 164   5                checkNss = true;
 165   5              }
 166   4            }
 167   3            else
 168   3            {
 169   4              if (!(SPI0CFG & SPI0CFG_SLVSEL__BMASK))
 170   4              {
 171   5                break;
 172   5              }
 173   4            }
C51 COMPILER V9.53.0.0   SPI_0                                                             01/08/2018 09:45:17 PAGE 4   

 174   3          }
 175   2        }
 176   1      
 177   1        // Transfer is done.  Deassert NSS (if used)
 178   1        if (modeIsMaster && useNss)
 179   1        {
 180   2          SPI0CN0_NSSMD0 = 1;
 181   2        }
 182   1      
 183   1        return xferCount;
 184   1      }
 185          
 186          // ----------------------------------------------------------------------------
 187          // Check if SPI is busy with a transfer in progress.
 188          // ----------------------------------------------------------------------------
 189          bool SPI0_isBusy(void)
 190          {
 191   1        uint8_t count = 0;
 192   1        bool ret = false;
 193   1      
 194   1        // the SPI busy bit can drop between bytes so you cant just poll
 195   1        // it to find out when all the bytes have been transferred.  Or sometimes
 196   1        // you will catch it not set, between bytes when it is really still
 197   1        // busy.  To make busy test useful, we need to know when it is done
 198   1        // with all bytes.  That is why there is a loop below.
 199   1      
 200   1        // Read it several times and if the bit is ever marked busy, then
 201   1        // return busy indication.
 202   1        for (count = 0; count < 3; count++)
 203   1        {
 204   2          if (SPI0CFG & SPI0CFG_SPIBSY__BMASK)
 205   2          {
 206   3            ret = true;
 207   3          }
 208   2        }
 209   1      
 210   1        // If it makes it through the loops above without find the busy bit
 211   1        // then it is not busy.
 212   1        return ret;
 213   1      }
 214          
 215          // ----------------------------------------------------------------------------
 216          // Initialize the SPI peripheral operating parameters
 217          // ----------------------------------------------------------------------------
 218          void SPI0_init(SPI0_ClockMode_t clockMode, bool isMasterMode, bool is4wire)
 219          {
 220   1        // Figure out if this driver controls NSS signal (chip select)
 221   1        modeIsMaster = isMasterMode;
 222   1        useNss = is4wire;
 223   1        initIsValid = true;
 224   1      
 225   1        // disable SPI before configuring
 226   1        SPI0CN0_SPIEN = 0;
 227   1      
 228   1        // Set up the clock mode (phase and polarity), and the
 229   1        // master/slave selection
 230   1        SPI0CFG = clockMode | (isMasterMode ? SPI0CFG_MSTEN__MASTER_ENABLED
 231   1                                            : SPI0CFG_MSTEN__MASTER_DISABLED);
 232   1      
 233   1        // Set up the NSS mode bits depending on whether 3-wire or 4-wire
 234   1        // is used, and whether master or slave mode
 235   1        if (is4wire)
 236   1        {
C51 COMPILER V9.53.0.0   SPI_0                                                             01/08/2018 09:45:17 PAGE 5   

 237   2          SPI0CN0_NSSMD0 = 1;
 238   2          SPI0CN0_NSSMD1 = isMasterMode ? 1 : 0;
 239   2        }
 240   1        else
 241   1        {
 242   2          SPI0CN0_NSSMD0 = 0;
 243   2          SPI0CN0_NSSMD1 = 0;
 244   2        }
 245   1      
 246   1        // clear all the interrupt bits and enable the SPI
 247   1        SPI0CN0 &= ~0xF0;
 248   1        SPI0CN0_SPIEN = 1;
 249   1      }
 250          
 251          // ----------------------------------------------------------------------------
 252          // Set the clock divider used to determine SPI clock rate
 253          // ----------------------------------------------------------------------------
 254          void SPI0_setClockDivider(uint16_t divider)
 255          {
 256   1        // constrain input in case user passes a bad value
 257   1        if (divider > 512)
 258   1        {
 259   2          divider = 512;
 260   2        }
 261   1        if (divider < 2)
 262   1        {
 263   2          divider = 2;
 264   2        }
 265   1        // make even value
 266   1        divider &= ~1;
 267   1      
 268   1        // Transform the divider to the form needed by SFR.
 269   1        // See equation in the data sheet for more information
 270   1        divider /= 2;
 271   1        divider -= 1;
 272   1      
 273   1        // disable SPI before configuring, then update the value
 274   1        SPI0CN0_SPIEN = 0;
 275   1        SPI0CKR = (uint8_t)divider;
 276   1        SPI0CN0_SPIEN = 1;
 277   1      }
 278          
 279          #if EFM8PDL_SPI0_USE_BUFFER == 1
 280          
 281          // flag to indicate that RX buffer should be used for buffered transfers
 282          static bool useRx = false;
 283          
 284          // flag to indicate that TX buffer should be used for buffered transfers
 285          static bool useTx = false;
 286          
 287          static uint8_t rxCountRemaining = 0;
 288          static uint8_t txCountRemaining = 0;
 289          static uint8_t bytesRemaining = 0;
 290          static SI_VARIABLE_SEGMENT_POINTER(pTxBuf, uint8_t, EFM8PDL_SPI0_TX_SEGTYPE) = NULL;
 291          static SI_VARIABLE_SEGMENT_POINTER(pRxBuf, uint8_t, EFM8PDL_SPI0_RX_SEGTYPE) = NULL;
 292          
 293          // ----------------------------------------------------------------------------
 294          // Set up an interrupt driven SPI transfer.
 295          // ----------------------------------------------------------------------------
 296          void
 297          SPI0_transfer(SI_VARIABLE_SEGMENT_POINTER(pTxBuffer, uint8_t,
 298                                                    EFM8PDL_SPI0_TX_SEGTYPE),
 299                        SI_VARIABLE_SEGMENT_POINTER(pRxBuffer, uint8_t,
C51 COMPILER V9.53.0.0   SPI_0                                                             01/08/2018 09:45:17 PAGE 6   

 300                                                    EFM8PDL_SPI0_RX_SEGTYPE),
 301                        SPI0_TransferDirection_t dir,
 302                        uint8_t xferCount)
 303          {
 304   1        rxCountRemaining = xferCount;
 305   1        txCountRemaining = xferCount;
 306   1        bytesRemaining = xferCount;
 307   1        pTxBuf = pTxBuffer;
 308   1        pRxBuf = pRxBuffer;
 309   1        useRx = dir & SPI0_TRANSFER_RX;
 310   1        useTx = dir & SPI0_TRANSFER_TX;
 311   1      
 312   1        // Check to see if run-time mode variables have been set up
 313   1        if (!initIsValid)
 314   1        {
 315   2          SPI0_internalInit();
 316   2        }
 317   1      
 318   1        // Flush the RX buffer in case something is in there
 319   1        {
 320   2          uint8_t dummy = SPI0DAT;
 321   2        }
 322   1      
 323   1        // Clear all the interrupt flags
 324   1        SPI0CN0 &= ~0xF0;
 325   1      
 326   1        // assert NSS (if used)
 327   1        if (modeIsMaster && useNss)
 328   1        {
 329   2          SPI0CN0_NSSMD0 = 0;
 330   2        }
 331   1      
 332   1      #if EFM8PDL_SPI0_USE_PIPELINE == 0
 333   1        // Write the first byte to get the transfer started
 334   1        if (SPI0CN0_TXBMT && txCountRemaining)
 335   1        {
 336   2          // If user provided tx data, then use that
 337   2          if (useTx)
 338   2          {
 339   3            SPI0DAT = *pTxBuf;
 340   3            ++pTxBuf;
 341   3          }
 342   2      
 343   2          // Otherwise no tx data, so just stuff zeroes
 344   2          else
 345   2          {
 346   3            SPI0DAT = 0;
 347   3          }
 348   2          --txCountRemaining;
 349   2        }
 350   1      #else
                // Stuff as many bytes as we can in the tx buffer to start.
                while (SPI0CN0_TXBMT && txCountRemaining)
                {
                  // If user provided tx data, then use that
                  if (useTx)
                  {
                    SPI0DAT = *pTxBuf;
                    ++pTxBuf;
                  }
              
                  // Otherwise no tx data, so just stuff zeroes
                  else
C51 COMPILER V9.53.0.0   SPI_0                                                             01/08/2018 09:45:17 PAGE 7   

                  {
                    SPI0DAT = 0;
                  }
                  --txCountRemaining;
                }
              #endif
 369   1      
 370   1        // At this point SPI should be running and the rest will be handled
 371   1        // in the interrupt service routine
 372   1      }
 373          
 374          // ----------------------------------------------------------------------------
 375          // Stop a running SPI transfer.
 376          // ----------------------------------------------------------------------------
 377          void SPI0_abortTransfer(void)
 378          {
 379   1        // Resetting the counters will cause the ISR to ignore any remaining
 380   1        // SPI interrupts.
 381   1        txCountRemaining = 0;
 382   1        rxCountRemaining = 0;
 383   1        useTx = false;
 384   1        useRx = false;
 385   1        pTxBuf = NULL;
 386   1        pRxBuf = NULL;
 387   1      
 388   1        // drop the chip select if used
 389   1        if (modeIsMaster && useNss)
 390   1        {
 391   2          SPI0CN0_NSSMD0 = 1;
 392   2        }
 393   1      }
 394          
 395          // ----------------------------------------------------------------------------
 396          // Get the number of bytes remaining in the transfer.  This will really
 397          // be the number of RX bytes.
 398          // ----------------------------------------------------------------------------
 399          uint8_t SPI0_bytesRemaining(void)
 400          {
 401   1        return bytesRemaining;
 402   1      }
 403          
 404          // ----------------------------------------------------------------------------
 405          // Handler for interrupt driven SPI data transfers.
 406          // ----------------------------------------------------------------------------
 407          SI_INTERRUPT(SPI0_ISR, SPI0_IRQn)
 408          {
 409   1        uint8_t intFlags;
 410   1      
 411   1        // Get the interrupt flags and then clear any that are pending
 412   1        intFlags = SPI0CN0 & 0xF0;
 413   1        SPI0CN0 = (SPI0CN0 & (~intFlags | 0x0F));
 414   1      
 415   1        // Handle completion of one frame (byte) of data transferred.
 416   1        // This means we are ready to read a received byte, and write
 417   1        // the next TX byte.
 418   1        if (intFlags & SPI0_INT_IF)
 419   1        {
 420   2          // Read bytes as long as the read count is non-zero
 421   2          if (rxCountRemaining)
 422   2          {
 423   3            // If the user provided an RX buffer then read a byte into that.
 424   3            if (useRx)
 425   3            {
C51 COMPILER V9.53.0.0   SPI_0                                                             01/08/2018 09:45:17 PAGE 8   

 426   4              *pRxBuf = SPI0DAT;
 427   4              ++pRxBuf;
 428   4            }
 429   3      
 430   3            // Else, user does not care about RX data so do a dummy read.
 431   3            else
 432   3            {
 433   4              uint8_t dummy = SPI0DAT;
 434   4            }
 435   3            --rxCountRemaining;
 436   3      
 437   3            // If we get to zero remaining, it means that all the
 438   3            // bytes have been transferred.
 439   3            if (rxCountRemaining == 0)
 440   3            {
 441   4              // deassert NSS (if used)
 442   4              if (modeIsMaster && useNss)
 443   4              {
 444   5                SPI0CN0_NSSMD0 = 1;
 445   5              }
 446   4              // Tell user that the transfer is complete.
 447   4              SPI0_transferCompleteCb();
 448   4            }
 449   3      
 450   3            // If there are more RX bytes to receive, then remember the
 451   3            // current count to be used by _bytesRemaining()
 452   3            else
 453   3            {
 454   4              bytesRemaining = rxCountRemaining;
 455   4            }
 456   3          }
 457   2      
 458   2          // Write bytes if there are more TX bytes to send and the
 459   2          // TX buffer is not full
 460   2          if (txCountRemaining && SPI0CN0_TXBMT)
 461   2          {
 462   3            // If user provided a TX buffer then write the next byte
 463   3            if (useTx)
 464   3            {
 465   4              SPI0DAT = *pTxBuf;
 466   4              ++pTxBuf;
 467   4            }
 468   3      
 469   3            // Otherwise user did not provide a buffer so just write a zero.
 470   3            else
 471   3            {
 472   4              SPI0DAT = 0;
 473   4            }
 474   3            --txCountRemaining;
 475   3          }
 476   2        }
 477   1      
 478   1      #if EFM8PDL_SPI0_USE_ERR_CALLBACK == 1
                // Check for errors and notify user
                if (intFlags & (SPI0_MODF_IF | SPI0_RXOVR_IF))
                {
                  // Note, the RXOVRN bit only happens in slave mode, and the MODF
                  // bit is not very likely, so in master mode this block will
                  // probably not ever be used.
                  SPI0_transferErrorCb(intFlags & (SPI0_MODF_IF | SPI0_RXOVR_IF));
                }
              #endif // EFM8PDL_SPI0_USE_ERR_CALLBACK
 488   1      }
C51 COMPILER V9.53.0.0   SPI_0                                                             01/08/2018 09:45:17 PAGE 9   

 489          
 490          #endif // EFM8PDL_SPI0_USE_BUFFER
 491          
 492          /** @} (end spi_0_group) */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    480    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5       5
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
